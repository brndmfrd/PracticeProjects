'''
For a hard-coded function this script will calculate the approximate 
roots as per Newton's Method algorithm.  

For new functions to be calculated this will require changes and 
conciderations to be made to the script.


Note:  This script is a modified version of the same script 
located here:
http://thelivingpearl.com/code-for-newtons-method-in-python/
'''

import sys

# Our function - Change this when you have a new function
def f(x):
    return 0.1*x**4 + 0.15*x**3 - 4* x**2 + 11*x - 6

# Our derivitive of our function - Change when when you get a new function.  
def f_prime(x):
    return 0.4*x**3 + .45*x**2 - 4*x**2 + 11

def newt(x,n):
    for i in range(n):
        if f_prime(x) == 0:
            return x
        x = x - f(x)/f_prime(x)
    return x

# Our commander 'main'
def main(argv):
    print argv[0], argv[1]
    print 'The root is: ',
    print newt(float(argv[0]),int(argv[1]))


# boilerplate
''' 
This script requires two arguments to be be ran by itself.
The first is our initial 'x' value that is effectivly a guess.  Made it a good one and 
The algorithm will take much less time.

The second value is the number of itterations for the method to take to find it's 
approximations.  This method runs in polynomial time, so try to keep the number low.  
That being said, too few itterations may prove to give you poor results.  
'''
if __name__ == "__main__":
    if (len(sys.argv) != 3):
        sys.exit('Usage: newtonMethod.py <x> <n>')
    main(sys.argv[1:])
